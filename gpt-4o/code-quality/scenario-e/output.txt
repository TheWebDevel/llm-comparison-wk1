```csharp
// Program.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

var users = new List<User>
{
    new User { Id = 1, Name = "Alice" },
    new User { Id = 2, Name = "Bob" }
};

app.MapGet("/users/{id:int}", (int id, HttpContext context) =>
{
    var user = users.FirstOrDefault(u => u.Id == id);
    context.Response.Headers["x-correlation-id"] = Guid.NewGuid().ToString();

    return user is not null ? Results.Ok(user) : Results.NotFound();
});

app.Run();

record User(int Id, string Name);
```

```csharp
// UserApiTests.cs
using System.Net;
using System.Net.Http.Json;
using Microsoft.AspNetCore.Mvc.Testing;
using Xunit;

public class UserApiTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly WebApplicationFactory<Program> _factory;

    public UserApiTests(WebApplicationFactory<Program> factory)
    {
        _factory = factory;
    }

    [Fact]
    public async Task GetUser_ReturnsUser_AndCorrelationId()
    {
        var client = _factory.CreateClient();

        var response = await client.GetAsync("/users/1");

        Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        Assert.True(response.Headers.Contains("x-correlation-id"));

        var user = await response.Content.ReadFromJsonAsync<User>();
        Assert.Equal(1, user?.Id);
        Assert.Equal("Alice", user?.Name);
    }

    [Fact]
    public async Task GetUser_ReturnsNotFound_WhenMissing()
    {
        var client = _factory.CreateClient();

        var response = await client.GetAsync("/users/999");

        Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        Assert.True(response.Headers.Contains("x-correlation-id"));
    }

    private record User(int Id, string Name);
}
```
