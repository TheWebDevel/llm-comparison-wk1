```python
from typing import List, Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

app = FastAPI()

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory store (replace with a database in production)
books = []
next_book_id = 1


class Book(BaseModel):
    id: int = Field(..., ge=1)
    title: str = Field(..., min_length=1)
    author: str = Field(..., min_length=1)
    published: int = Field(..., ge=0)


class BookCreate(BaseModel):
    title: str = Field(..., min_length=1)
    author: str = Field(..., min_length=1)
    published: int = Field(..., ge=0)


@app.get("/books", response_model=List[Book], status_code=status.HTTP_200_OK)
async def get_books():
    return books


@app.post("/books", response_model=Book, status_code=status.HTTP_201_CREATED)
async def create_book(book: BookCreate):
    global next_book_id
    new_book = Book(id=next_book_id, **book.dict())
    books.append(new_book)
    next_book_id += 1
    return new_book


@app.get("/books/{book_id}", response_model=Book, status_code=status.HTTP_200_OK)
async def get_book(book_id: int):
    book = next((b for b in books if b.id == book_id), None)
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Book not found"
        )
    return book


@app.put("/books/{book_id}", response_model=Book, status_code=status.HTTP_200_OK)
async def update_book(book_id: int, updated_book: BookCreate):
    book = next((b for b in books if b.id == book_id), None)
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Book not found"
        )
    updated_book_data = updated_book.dict()
    updated_book_data["id"] = book_id
    updated_book_obj = Book(**updated_book_data)
    books[books.index(book)] = updated_book_obj
    return updated_book_obj


@app.delete("/books/{book_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_book(book_id: int):
    book = next((b for b in books if b.id == book_id), None)
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Book not found"
        )
    books.remove(book)


import pytest


@pytest.fixture
def test_client():
    from fastapi.testclient import TestClient

    return TestClient(app)


def test_create_book(test_client):
    response = test_client.post(
        "/books", json={"title": "Test Book", "author": "Test Author", "published": 2024}
    )
    assert response.status_code == 201
    assert response.json()["title"] == "Test Book"


def test_create_book_invalid_data(test_client):
    response = test_client.post(
        "/books", json={"title": "", "author": "Test Author", "published": 2024}
    )
    assert response.status_code == 422

```