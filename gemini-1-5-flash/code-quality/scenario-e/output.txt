 ```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.TestHost;
using System.Net;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using Xunit;

// User Model
public record User(int Id, string Name);

var users = new List<User>()
{
    new(1, "John Doe"),
    new(2, "Jane Smith")
};

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/users/{id:int}", (int id) =>
{
    var user = users.FirstOrDefault(u => u.Id == id);
    if (user is null)
    {
        return Results.NotFound();
    }
    return Results.Ok(user);
})
.WithMetadata(new ProducesResponseTypeAttribute(StatusCodes.Status200OK))
.WithMetadata(new ProducesResponseTypeAttribute(StatusCodes.Status404NotFound));


app.Use((context, next) =>
{
    context.Response.Headers.Add("x-correlation-id", Guid.NewGuid().ToString());
    return next(context);
});

app.Run();


// xUnit Tests
public class UsersEndpointTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly HttpClient _client;

    public UsersEndpointTests(WebApplicationFactory<Program> factory)
    {
        _client = factory.CreateClient();
    }

    [Fact]
    public async Task GetExistingUser_ReturnsOk()
    {
        var response = await _client.GetAsync("/users/1");
        response.EnsureSuccessStatusCode();
        Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        Assert.Contains("x-correlation-id", response.Headers);
        var user = await response.Content.ReadFromJsonAsync<User>();
        Assert.Equal(1, user?.Id);
        Assert.Equal("John Doe", user?.Name);

    }

    [Fact]
    public async Task GetNonExistingUser_ReturnsNotFound()
    {
        var response = await _client.GetAsync("/users/3");
        Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        Assert.Contains("x-correlation-id", response.Headers);

    }

    [Fact]
    public async Task GetExistingUser_ReturnsCorrectContentType()
    {
        var response = await _client.GetAsync("/users/1");
        response.EnsureSuccessStatusCode();
        Assert.Equal("application/json; charset=utf-8", response.Content.Headers.ContentType.ToString());
    }
}
```