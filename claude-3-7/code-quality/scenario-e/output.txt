```csharp
// Program.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddSingleton<IUserRepository, InMemoryUserRepository>();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Define endpoint
app.MapGet("/users/{id:int}", (int id, IUserRepository repository) =>
{
    var user = repository.GetById(id);

    if (user == null)
        return Results.NotFound();

    // Add correlation ID header
    var correlationId = Guid.NewGuid().ToString();
    return Results.Ok(user).WithHeaders(new HeaderDictionary
    {
        { "x-correlation-id", correlationId }
    });
})
.WithName("GetUserById")
.WithOpenApi();

app.Run();

// Models and Repository
public class User
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}

public interface IUserRepository
{
    User? GetById(int id);
}

public class InMemoryUserRepository : IUserRepository
{
    private readonly List<User> _users = new()
    {
        new User { Id = 1, Name = "John Doe", Email = "john@example.com" },
        new User { Id = 2, Name = "Jane Smith", Email = "jane@example.com" },
        new User { Id = 3, Name = "Bob Johnson", Email = "bob@example.com" }
    };

    public User? GetById(int id) => _users.FirstOrDefault(u => u.Id == id);
}

// Make Program class and Main method public for testing
public partial class Program { }
```

```csharp
// UserApiTests.cs
using Microsoft.AspNetCore.Mvc.Testing;
using System.Net;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Xunit;

namespace Api.Tests;

public class UserApiTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly WebApplicationFactory<Program> _factory;

    public UserApiTests(WebApplicationFactory<Program> factory)
    {
        _factory = factory;
    }

    [Fact]
    public async Task GetUser_WithValidId_ReturnsUser()
    {
        // Arrange
        var client = _factory.CreateClient();
        var validId = 1;

        // Act
        var response = await client.GetAsync($"/users/{validId}");

        // Assert
        response.EnsureSuccessStatusCode();
        Assert.Equal(HttpStatusCode.OK, response.StatusCode);

        var user = await response.Content.ReadFromJsonAsync<User>();
        Assert.NotNull(user);
        Assert.Equal(validId, user.Id);

        // Check for correlation ID header
        Assert.True(response.Headers.Contains("x-correlation-id"));
        Assert.NotEmpty(response.Headers.GetValues("x-correlation-id"));
    }

    [Fact]
    public async Task GetUser_WithInvalidId_Returns404()
    {
        // Arrange
        var client = _factory.CreateClient();
        var invalidId = 999;

        // Act
        var response = await client.GetAsync($"/users/{invalidId}");

        // Assert
        Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
    }
}
```